#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2009 The Tegaki project contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Contributors to this file:
# - Mathieu Blondel

import sys
import os
from optparse import OptionParser

from tegaki.charcol import CharacterCollection

from tegakitools.charcol import *

VERSION = '0.3.1'

class TegakiConvertError(Exception):
    pass

class TegakiConvert(object):

    def __init__(self, options, args):
        self._directories = options.directories
        self._charcols = options.charcols
        self._databases = options.databases
        self._tomoe = options.tomoe
        self._kuchibue = options.kuchibue
        self._include = options.include
        self._exclude = options.exclude
        self._max_samples = options.max_samples

        if HAS_KANJIVG_SUPPORT:
          self._kanjivg = options.kanjivg

        if len(args) > 1:
            raise TegakiConvertError, "tegaki-convert needs only 1 argument"
        elif len(args) == 1:
            self._output_path = args[0]
        else:
            self._output_path = None

    def run(self):
        if HAS_KANJIVG_SUPPORT:
          charcol = get_aggregated_charcol(
                          ((TYPE_CHARCOL, self._charcols),
                           (TYPE_CHARCOL_DB, self._databases),
                           (TYPE_DIRECTORY, self._directories),
                           (TYPE_TOMOE, self._tomoe),
                           (TYPE_KANJIVG, self._kanjivg),
                           (TYPE_KUCHIBUE, self._kuchibue)), self._output_path)
        else:
          charcol = get_aggregated_charcol(
                          ((TYPE_CHARCOL, self._charcols),
                           (TYPE_CHARCOL_DB, self._databases),
                           (TYPE_DIRECTORY, self._directories),
                           (TYPE_TOMOE, self._tomoe),
                           (TYPE_KUCHIBUE, self._kuchibue)), self._output_path)
          


        charcol.include_characters_from_files(self._include)
        charcol.exclude_characters_from_files(self._exclude)

        # max samples
        if self._max_samples:
            charcol.remove_samples(keep_at_most=self._max_samples)

        # output
        if not self._output_path:
            # outputs to stdout if not output path specified
            print charcol.to_xml()
        else:
            charcol.save(self._output_path)

parser = OptionParser(usage="usage: %prog [options] [output-path]",
                      version="%prog " + VERSION)

parser.add_option("-d", "--directory",
                  action="append", type="string", dest="directories",
                  default=[],
                  help="Directory containing individual XML character files")
parser.add_option("-c", "--charcol",
                  action="append", type="string", dest="charcols",
                  default=[],
                  help="character collection XML files")
parser.add_option("-b", "--db",
                  action="append", type="string", dest="databases",
                  default=[],
                  help="character collection XML files")
parser.add_option("-t", "--tomoe-dict",
                  action="append", type="string", dest="tomoe",
                  default=[],
                  help="Tomoe XML dictionary files")
if HAS_KANJIVG_SUPPORT:
  parser.add_option("-a", "--kanjivg-dict",
                    action="append", type="string", dest="kanjivg",
                    default=[],
                    help="KanjiVG XML dictionary files")
parser.add_option("-k", "--kuchibue",
                  action="append", type="string", dest="kuchibue",
                  default=[],
                  help="Kuchibue unipen database")
parser.add_option("-i", "--include",
                  action="append", type="string", dest="include",
                  default=[],
                  help="File containing characters to include")
parser.add_option("-e", "--exclude",
                  action="append", type="string", dest="exclude",
                  default=[],
                  help="File containing characters to exclude")
parser.add_option("-m", "--max-samples",
                  type="int", dest="max_samples",
                  help="Maximum number of samples per character")

(options, args) = parser.parse_args()

try:
    TegakiConvert(options, args).run()
except TegakiConvertError, e:
    sys.stderr.write(str(e) + "\n\n")
    parser.print_help()
    sys.exit(1)
